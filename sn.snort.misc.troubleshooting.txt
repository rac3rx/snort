lert tcp any any -> any any(msg: "Testing Alert" ; sid:1000001)
In my case, I don’t have any criteria so it will load on any ICMP packet it receives. In the above rule we have also provide a signature id (sid) which is highly required. Bciy convention when you write your own snort rules, you have to start above 999999
snort11
snort11

To verify the snort is actually generating alerts, open Command prompt and go to c:\Snort\bin and write a command
snort -iX -A console -c C:\snort\etc\snort.conf -l C:\Snort\log -K ascii

http://manual-snort-org.s3-website-us-east-1.amazonaws.com/node31.html#SECTION00444000000000000000
3.4.4 sid
The sid keyword is used to uniquely identify Snort rules. This information allows output plugins to identify rules easily. This option should be used with the rev keyword. (See section [*])

2#2100 Reserved for future use
100-999,999 Rules included with the Snort distribution
36#361,000,000 Used for local rules
The file sid-msg.map contains a mapping of alert messages to Snort rule IDs. This information is useful when post-processing alert to map an ID to an alert message.
 alert tcp any any -> any 80 (content:"BOB"; sid:1000983; rev:1;)

3.4.4.1 Format
    sid:<snort rules id>;
3.4.4.2 Example
This example is a rule with the Snort Rule ID of 1000983.

ftp http://$EXTERNAL_HOST/cmd.exe
curl
wget

snort -c snort.conf
  -h 192.168.1.0/24 -dq -l
  c:\log -vyU net 192.168.1

grep -i error /var/log/messages

grep -i warning /var/log/messages

/usr/local/bin/u2spewfoo /var/log/snort/[log file name]
strings

****
snort -T

IDSwakeup is a collection of tools that allows to test network intrusion detection systems.

The main goal of IDSwakeup is to generate false attack that mimic well known ones, in order to see if NIDS detects them and generates false positives.

Like nidsbench, IDSwakeup is being published in the hopes that a more precise testing methodology might be applied to network intrusion detection, which is still a black art at best.


alert ip any any -> any any ( msg: "ICMP packet detected!"; sid: 12345678; rev:1;)
alert icmp any any -> 192.168.1.1 any (msg: "Someone Pinged DotOne";)
alert tcp any any -> any 25 (content:"|00|";sid:12345678;rev:1;classtype:misc-attack;)
This rule looks for binary content 0x00 in any TCP segment to port 25. Turbo Snort Rules reports this rule is slightly slower than the average rule in the 2.3.3 and 2.4.0 Snort rule sets.

Bpfstat bsd drop packets


alert ip any any -> any any (msg: "IP Packet detected";)
You can use this rule at the end of the snort.conf file the first time you install Snort.

TIP
I use a slightly modified version of this rule to continuously monitor multiple Snort sensors just to make sure everybody is up and running. This rule is as follows:

alert icmp 192.168.1.4 any -> 192.168.1.1 any (msg: "HEARTBEAT";)
My Snort sensor IP address is 192.168.1.4 and gateway address is 192.168.1.1. I run the following command through cron daemon on the Linux machine to trigger this rule every 10 minutes.

ping -n 1 192.168.1.1
The command sends exactly one ICMP packet to the gateway machine. This packet causes an alert entry to be created. If there is no alert every 10 minutes, there is something wrong with the sensor.

ifconfig promisc

#
# better stuff
#
http://resources.infosecinstitute.com/snort-rules-workshop-part-one/#gref
sudo snort -T -i eth0 -c /etc/snort/snort.conf

Here we are telling Snort to test (-T) the configuration file (-c points to its location) on the eth0 interface (enter your interface value if it’s different). This will produce a lot of output. Scroll up until you see “0 Snort rules read” (see the image below).

You should see that the file is empty. Add the following rule (as one string of code, no line breaks):

sudo cat <<EOF>> /etc/snort/rules/local.rules
alert icmp any any -> $HOME_NET any (msg:”ICMP test”; sid:1234567; rev:1; classtype:icmp-event;)
EOF
sudo snort -T -i eth0 -c /etc/snort/snort.conf   # scrollup one rule loaded

sudo snort -A console -q -c /etc/snort/snort.conf -i eth0

alert tcp 192.168.x.x any -> $HOME_NET 21 (msg:”FTP connection attempt”; sid:1000002; rev:1;)
sudo snort -A console -q -c /etc/snort/snort.conf -i eth0 -K ascii
ls /var/log/snort
sudo snort -A console -q -c /etc/snort/snort.conf -i eth0

